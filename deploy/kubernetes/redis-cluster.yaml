---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: default
data:
  redis.conf: |
    # Redis Configuration for Performance Optimization
    
    # Memory and Performance
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    
    # Network and Connection Settings
    timeout 300
    tcp-keepalive 300
    tcp-backlog 511
    
    # Performance Optimizations
    hz 10
    dynamic-hz yes
    
    # Memory Usage Optimization
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # Client Management
    maxclients 1000
    
    # Logging
    loglevel notice
    logfile ""
    
    # Security
    protected-mode yes
    
    # Persistence
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Replication (if using multiple instances)
    replica-serve-stale-data yes
    replica-read-only yes
    
    # Memory Management
    activerehashing yes
    
    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: default
  labels:
    app: redis-cluster
    component: cache
spec:
  serviceName: "redis-cluster"
  replicas: 3
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
        securityContext:
          runAsUser: 999
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      # Redis Exporter for Prometheus metrics
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      
      securityContext:
        fsGroup: 1000
      
      # Node selection for performance
      nodeSelector:
        workload-type: "memory-optimized"
      
      tolerations:
      - key: "workload-type"
        operator: "Equal"
        value: "memory-optimized"
        effect: "NoSchedule"

  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3"
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: default
  labels:
    app: redis-cluster
    component: cache
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: redis-cluster
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
  labels:
    app: redis-cluster
    component: cache
spec:
  type: ClusterIP
  selector:
    app: redis-cluster
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: 9121
    protocol: TCP

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: default
  labels:
    app: redis-cluster
    component: cache
spec:
  selector:
    matchLabels:
      app: redis-cluster
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: redis-cluster

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: redis-cluster
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: risk-api-optimized
    - podSelector:
        matchLabels:
          app: dash-app
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 9121
  egress:
  - {}  # Allow all egress for Redis replication and DNS

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: default
type: Opaque
data:
  # Base64 encoded Redis password (if authentication is enabled)
  redis-password: ""  # Set during deployment if needed