name: Build and Deploy to ECR

on:
  push:
    branches: [ main, master, develop, uat ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-west-2
  REGISTRY_NAME: mono-repo

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 pyyaml
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get current Git info
      id: git-info
      run: |
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        echo "commit=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
    
    - name: Generate image metadata
      id: meta
      run: |
        BRANCH="${{ steps.git-info.outputs.branch }}"
        COMMIT="${{ steps.git-info.outputs.commit }}"
        TIMESTAMP="${{ steps.git-info.outputs.timestamp }}"
        
        # Clean branch name for use in tags
        BRANCH_CLEAN=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9.-]/-/g')
        
        # Generate tags
        TAGS="latest,${TIMESTAMP},${BRANCH_CLEAN},${COMMIT}"
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "branch-clean=${BRANCH_CLEAN}" >> $GITHUB_OUTPUT
    
    - name: Build and push all services
      id: build
      env:
        IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
        BRANCH: ${{ steps.git-info.outputs.branch }}
        COMMIT: ${{ steps.git-info.outputs.commit }}
      run: |
        echo "Building all services with ECR pipeline"
        python build/ecr_pipeline.py \
          --service all \
          --branch "$BRANCH" \
          --commit "$COMMIT" \
          --region "$AWS_REGION"
    
    - name: Generate deployment manifests
      env:
        ENVIRONMENT: ${{ steps.meta.outputs.branch-clean == 'main' && 'prod' || (steps.meta.outputs.branch-clean == 'develop' && 'dev' || steps.meta.outputs.branch-clean) }}
        IMAGE_TAG: ${{ steps.git-info.outputs.timestamp }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        echo "Generating Kubernetes manifests for environment: $ENVIRONMENT"
        python build/k8s_template_processor.py --environment "$ENVIRONMENT"
    
    - name: Upload manifests as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests-${{ steps.meta.outputs.branch-clean }}
        path: deploy/manifests/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Scan images with ECR
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Services to scan
        SERVICES=("risk-api" "airflow" "data-pipeline" "jupyterhub")
        
        for service in "${SERVICES[@]}"; do
          echo "Scanning $service..."
          
          # Start image scan
          aws ecr start-image-scan \
            --repository-name "mono-repo/$service" \
            --image-id imageTag=latest \
            --region $AWS_REGION || echo "Scan already in progress or completed"
          
          # Wait for scan to complete and get results
          sleep 30
          
          SCAN_RESULTS=$(aws ecr describe-image-scan-findings \
            --repository-name "mono-repo/$service" \
            --image-id imageTag=latest \
            --region $AWS_REGION \
            --output json)
          
          echo "Scan results for $service:"
          echo "$SCAN_RESULTS" | jq '.imageScanFindings.findingCounts'
          
          # Check for critical vulnerabilities
          CRITICAL=$(echo "$SCAN_RESULTS" | jq -r '.imageScanFindings.findingCounts.CRITICAL // 0')
          HIGH=$(echo "$SCAN_RESULTS" | jq -r '.imageScanFindings.findingCounts.HIGH // 0')
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 5 ]; then
            echo "⚠️ Security scan found $CRITICAL critical and $HIGH high severity vulnerabilities in $service"
            echo "::warning::Security vulnerabilities found in $service: $CRITICAL critical, $HIGH high"
          else
            echo "✅ Security scan passed for $service"
          fi
        done

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-develop
        path: deploy/manifests/
    
    - name: Deploy to EKS
      run: |
        # Update kubeconfig
        aws eks update-kubeconfig --name mono-repo-dev --region $AWS_REGION
        
        # Apply manifests
        kubectl apply -f deploy/manifests/dev/ --recursive
        
        # Wait for deployment to complete
        kubectl rollout status deployment/fastapi-app -n mono-repo-dev --timeout=600s
        kubectl rollout status deployment/web-app -n mono-repo-dev --timeout=600s
        kubectl rollout status deployment/dash-app -n mono-repo-dev --timeout=600s
        
        echo "✅ Deployment to development completed successfully"

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/uat'
    environment: uat
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-uat
        path: deploy/manifests/
    
    - name: Deploy to EKS
      run: |
        # Update kubeconfig
        aws eks update-kubeconfig --name mono-repo-uat --region $AWS_REGION
        
        # Apply manifests
        kubectl apply -f deploy/manifests/uat/ --recursive
        
        # Wait for deployment to complete
        kubectl rollout status deployment/fastapi-app -n mono-repo-uat --timeout=600s
        kubectl rollout status deployment/web-app -n mono-repo-uat --timeout=600s
        kubectl rollout status deployment/dash-app -n mono-repo-uat --timeout=600s
        
        echo "✅ Deployment to UAT completed successfully"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-main
        path: deploy/manifests/
    
    - name: Deploy to EKS
      run: |
        # Update kubeconfig
        aws eks update-kubeconfig --name mono-repo-prod --region $AWS_REGION
        
        # Apply manifests
        kubectl apply -f deploy/manifests/prod/ --recursive
        
        # Wait for deployment to complete
        kubectl rollout status deployment/fastapi-app -n mono-repo-prod --timeout=600s
        kubectl rollout status deployment/web-app -n mono-repo-prod --timeout=600s
        kubectl rollout status deployment/dash-app -n mono-repo-prod --timeout=600s
        
        echo "✅ Deployment to production completed successfully"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-uat, deploy-prod]
    if: always()
    
    steps:
    - name: Clean up artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-complete
        path: /dev/null